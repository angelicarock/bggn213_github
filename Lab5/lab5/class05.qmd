---
title: "class 5: data viz with ggplot"
author: "Angelica Rock (PID: 15781397)"
format: gfm
---

R has lots of ways to make figures and graphs in particular.
One that comes with R out of the box is called **"base" R** - the 'plot ()' function.

```{r}
cars
```

```{r}
plot(cars)
```

A very popular package in this area is called **ggplot2**.

Before I can use any add-on package like this I must install it with the 'install.packages("ggplot2")' command/function.

Then to use the package I need to load it with a 'library(ggplot2)' call.
```{r}
library(ggplot2)
ggplot(cars) + 
    aes (x = speed, y = dist) + 
    geom_point()

ggsave("myplot.png")
```

For "simple" plots like this, one base R code will be much shorter than ggplot code.

Let's fit a model and show it on my plot:

```{r}
ggplot(cars) + 
    aes (x = speed, y = dist) + 
    geom_point() + 
    geom_line() +
    geom_smooth()
```

Every ggplot has at least 3 layers

- **data** (data.frame with the numbers and stuff you want to plot)
- **aes**thetics (mapping of your data columns to your plot)
- **geom**s (there are tons of these, basics are 'geom_point()', 'geom_line()', 'geom_col()')

Make me a ggplot of the `mtcars` data set using `mpg` vs `disp`
and set the size of the points of the 'hp'
and set the color to 'am'
```{r}
library(ggrepel)
ggplot(mtcars) + 
    aes (x = mpg, y = disp, size = hp, col = am, label=rownames(mtcars)) + 
    geom_point() + 
    facet_wrap(~am) +
    geom_text_repel()
```

```{r}
ggplot(mtcars) + 
    aes (x = mpg, y = disp, size = hp, col = am, label=rownames(mtcars)) + 
    geom_point() + 
    labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       caption="Dataset: 'cars'") +
  geom_smooth(method="lm", se=FALSE) +
  theme_bw()
```

# Gene expression dataset
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)
colnames(genes)
ncol(genes)
```

```{r}
table(genes$State)
table(genes$State) / nrow(genes)
round(table(genes$State) / nrow(genes) *100, 2)
```
# Name object of drug treatment graph
```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
```

# Plot drug treatment graph
```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
```

# Scale color manually
```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

# Add labels
```{r}
p + scale_colour_manual(values=c("blue","gray","red")) +
    labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```

# Gapminder Dataset - Two ways to retrieve package
```{r}
# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)
library(gapminder)
# Can retrieve dataset using url and read.delim function
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)
```

# Creating plots from gapminder dataset
```{r}
gapminder_2007 <- gapminder %>% filter(year==2007)
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```





